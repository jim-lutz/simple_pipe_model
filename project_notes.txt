2018-03-30
    see http://happygitwithr.com/ to set up git repository
    follow her directions in the directory above, not here.
    
    in a trial read_pipe_data.R reads stuff in from a spreadsheet.
    will have to set range, 
    hopefully that won't have to be manually set different for each spreadsheet
    
2018-04-02
    manually collect metadata on pipe testing spreadsheets.
    
    instead try getting tidyxl to read specific information from Sheet1 in each of the 
    spreadsheets https://nacnudus.github.io/tidyxl/
    
    test on title
    
    went back to readxl
    was able to read meta data from all the spreadsheets
    don't have TC locations correct yet
    
2018-04-04
   
   use the index of the file loop to test for CPVC
   first 4 fields look OK. Not sure what was being read for rest.
   
   found pluck() to pick elements out of a tibble.
   
   able to read all test info from spreadsheet headers.
   34RigidCuBareRawData1.xlsx
   34RigidCUR47RawData1.xlsx
   Copy of 34RigidCUR47RawData1.xlsx
   all have the same title 
        3/4 RIGID CU RAW TEST DATA - ALL 1 SECOND DATA ?
    
   Seems to read data from 12PEXBareRawData2.xlsx
   still need to get the notes field 
   When set rows too high to catch all for spreadsheets it choked
   problems with dates because NOMINAL is in that column
   
2018-04-05

    manually collect data and note ranges
    see pipe_data_ranges.csv
    
    in 12PEXBareRawData2.xlsx 10 temperatures for TC1 are 'NAN' 
    Coercing text to numeric in E58130 / R58130C5: 'NAN'
    
    maybe at this stage get each Sheet1 into it's own data.table
    then incremental cleanups.
    
    34CPVCBareRawData2.xlsx too big?
    use unbounded rectangles. read notes and data together. trim later
    
    Cu files have more columns of data        

    fix later
    =========
    timestamp is in Excel date format

2018-04-09
    nominal & test flag as separate columns?
    
    processed timestamp for NOMINAL and other glitches
    
    work on testflag next
    
2018-04-10
   
    spreadsheet timestamps and DT_data.3[,timestamp] don't line up!
    DT_data.3[, list(start = min(timestamp),end   = max(timestamp))]
                 start                 end
    1: 2009-11-15 02:51:13 2009-12-08 06:31:31

    2009-11-13 02:51:13
    2009-12-06 06:31:32     
    
    revise clean_data.1.R to pull start and end timestamps into DT_test_info, both .csv & .Rdata
    
    Excel time! origin="1899-12-30"
    time zones! tz = "UTC" then force_tz  tzone = "America/Los_Angeles"
        
    not quite, origin in as.POSIXct has to be as.POSIXct as well 
    as.POSIXct(timestamp.num * 24*60*60,
            origin=as.POSIXct("1899-12-30", tz="America/Los_Angeles"),
            tz = "America/Los_Angeles")
    
2018-04-13
    in 12PEXBareRawData2 at least 5 rows after TestFlag=="START" and 
    5 rows before TestFlag=="END" are comments on test type.
    one TestFlag=="END" is missing.
    
    script to collect test segment information for all data sets to see what 
    needs to be fixed by hand.
    
2018-04-16
    figure out some way to collect comments
    near START & END
    look at other comments?
    number tests?
    
    1899-12-30 21:14:17 timestamp in 34RigidCuBareRawData1.xlsx?

    finding and fixing anamolous data in ./data/3/*.Rdata 
    
    fix anomalous data using separate program for each bfname 
    source after loading DT_data.3
    
    identify records that are part of a test
    
    DT_tests {START, END, comment) save /4/{bfname}_test.Rdata
    DT_data { ..., comment (across test records only), other.comment }
    
2018-04-18
    starting to build 12PEXBareRawData2.findNfixTF.R to find and fix anomalies in 
    12PEXBareRawData2
    
2018-04-19
    rename to findNfixTF.12PEXBareRawData2.R
    
    TestFlag contains
    START 1/2 PEX BARE IN-AIR WARM TEST 7
        START|END
        nom pipe diam
        pipe matl
        insulation level
        IN-AIR
        COLD|WARM
        TEST #, some are repeated
    
    Parse into
        test.edge
        nom.pipe.diam
        pipe.matl
        insul.level
        ?
        test.num <- only between appropriate START and END 

    These are in the filename, just confirm they match?        
        nom.pipe.diam
        pipe.matl
        insul.level
        
    Only doing IN-AIR, check consistency but not deal with it    
            
    COLD|WARM don't match test.type derived from nominal?
    figure out what's going on here

2018-04-20
    figure out a generic way to parse TestFlag into 
    test.edge, nom.pipe.diam, pipe.matl, insul.level, cold.warm, test.num
    
    don't forget to check '.' to 'COOL DOWN'
    
    test.edge only single record
    nom.pipe.diam, pipe.matl, insul.level are for entire spreadsheet
    cold.warm is for ?, starting conditions? chart this to see
    test.num between edge==START and edge==END inclusive
    
    still have to deal with other.comments
    
2018-04-23
    cold.warm is for starting condition. varies by test.num and test.segment, add to test.segment
    outside of test.segments, there's sometimes a MAKE TEMPS UNIFORM and a COOL DOWN
    those are probably to calculate UA and thermal mass 
    UA calculated from last few records before a COOL DOWN, or maybe the last few records of a test
    check papers.
    thermal mass calculated from COOL DOWN. flow turned off at COOL DOWN.
    maybe make some cooldown.segments as well?
    
    probably should make a charting function to see what's going on graphically
    
    need to clean up findNfixTF.12PEXBareRawData2.R as well.
    
2018-04-24
    check test.type in DT_data.3, may not match data
    
    can get rid of edge
        
2018-04-25
    change of strategy for findNfixTF
    after finding anomalies in findNfixTF, put the fix before the test
    that way it'll pass the test when rerunning findNfixTF.        
    
    still need to apply cold.warm across entire test.segment
    
2018-04-26
    ready to try plotly on 12PEXBareRawData2, I think
    
    Warning messages:
1: 'plotly_POST' is deprecated.
Use 'api_create' instead.
See help("Deprecated")
2: You need a plotly username. See help(signup, package = 'plotly')
3: Couldn't find username
4: You need an api_key. See help(signup, package = 'plotly')
5: Couldn't find api_key
6: You need a plotly username. See help(signup, package = 'plotly')
7: Couldn't find username
8: You need an api_key. See help(signup, package = 'plotly')
9: Couldn't find api_key
10: You need a plotly username. See help(signup, package = 'plotly')
11: Couldn't find username
12: You need an api_key. See help(signup, package = 'plotly')
13: Couldn't find api_key

2018-04-30
    api_key is not password
    chart well liked, get rest of 1/2barePEX to Gary before Thursday
    
    think about curve to fit temp (or delta T)z as function of 
    distance from start of pipe (gals)x and time from start of draw (y)
    
    possible surface chart?
    
    automated or semi-automated algorithm to pick test data sets?
    
    looks like should extend test.segment one record earlier to get time.zero for charting

2018-05-01
    extend test.segments 1 record earlier in findNfixTF
    
    update R, no wait till it comes through Ubuntu
    
    add to findNfixTF
    
    criteria to accept test.segment, 
    sorted last 2 minute temp range then looked at a lot of charts
    nrec > 500, only misses a couple that might be OK
    
    calc Tair.ave by test.segment
    calc Tstart as ave TC3:TC14 at time.zero by test.segment
    
    
    
    add to plotly title:
        nom.diam, material, insul level, nom gpm, 
        Tpipe.start, Tair.ave, date
    
2018-05-02
    making clean_data.4.R to get ready for plotting test.segments
    got Tpipe.start, Tair.ave so far
    
    should I make a separate data.table for test.segments?
    
    possible asymmetric logistic  f(x)= d+ (a-d)/(1+(x/c)^b)
    A is the minimal assymptote 
    B is Hill's slope 
    C is the inflection point 
    D is the maximum asymptote
    note: this is reverse logistice
    !w Generalised logistic function
    
    !w Gompertz curve is probably a better fit.
    
     Fabio Cavallini (2018) Fitting a Logistic Curve to Data, The College Mathematics Journal, 24:3, 247-253, DOI: 10.1080/07468342.1993.11973540 
     
    Arnold, David. “Fitting a Logistic Curve to Data.” College of the Redwoods, 2002. https://www.math.hmc.edu/~depillis/PCMI2005WEBSITE/logistic_REDWOODS.pdf.

    Berger, RD. “Comparison of the Gompertz and Logistic Equations to Describe Plant Disease Progress.” Phytopathology 71, no. 7 (1981): 716–719. http://www.apsnet.org/publications/phytopathology/backissues/Documents/1981Articles/Phyto71n07_716.pdf.

Fox, J, and S Weisberg. Time-Series Regression and Generalized Least Squares in R, An Appendix to An R Companion to Applied Regression. Sage Publications, New York, NY, 2010. https://socialsciences.mcmaster.ca/jfox/Books/Companion/appendix/Appendix-Nonlinear-Regression.pdf.

Appendix-Nonlinear-Regression.pdf
https://socialsciences.mcmaster.ca/jfox/Books/Companion/appendix/Appendix-Nonlinear-Regression.pdf

Gompertz function - Wikipedia
https://en.wikipedia.org/wiki/Gompertz_function

R Dashboards
https://plot.ly/r/dashboard/

1/2 PEX BARE, 4.0 GPM, Tstart = 57.5 | scatter3d made by Jlutz | plotly
https://plot.ly/~jlutz/25/

1/2 PEX BARE, 4.0 GPM, Tstart = 94.1 | scatter3d made by Jlutz | plotly
https://plot.ly/~jlutz/27/

1/2 PEX BARE, 0.5 GPM, Tstart = 59.6 | scatter3d made by Jlutz | plotly
https://plot.ly/~jlutz/9/

1/2 PEX BARE, 0.5 GPM, Tstart = 87.5 | scatter3d made by Jlutz | plotly
https://plot.ly/~jlutz/11/

2018-05-14

    after findNfix build a data.table about the test.segments,
    nominal.GPM 4 is .5 GPM off
    Tair.

    May want to keep DT_test.segments in ./data since it could apply to all tests
    should check if flow changes during test.segments    
    
    may need to do another search for the cool down segments
    
    Generalized Additive Models for Location, Scale and Shape 
    http://www.gamlss.com/
    Might be the best way to fit curves to data
    
2018-05-21
    3/4 insulated PEX
    clean_data.3.R which calls 
    findNfixTF.34PEXR47RawData2.R
        some NA timestamps
        one TestFlag 'PEX FIXTURE', assume should be 'OTHER FIXTURE' to match other FIXTUREs
        some TestFlags R-4.7 & R-4.6
            assume R-4.6 is typo, replace w/ R-4.7
       add dash & decimal to finsul.level      
       missed TestFlag 'COLD' @ record==286934, 
        move 'TEST 1' up one record & insert 'COLD'       
        
    
    modify clean_data.4.R to run 34PEXR47RawData2
    
    added ave.GPM by test.segment to DT_data.5
    
2018-05-22
    clean_data.3.R, clean_data.4.R, & clean_data.5.R
    on 12PEXBareRawData2, 34PEXR47RawData2
    
    in addition to ave.GPM, maybe do start.GPM & end.GPM as well.       
    think about adding starting & ending Reynolds number for each test.segment
    
2018-05-23
    AV/PV & deltaTnorm for Yanda.
    PV is location of TC in gallons
    AV is volume that flowed since t_0, GPM * t(minutes)
    or rather sum of running average pulses since t_0 * gallon per pulse
    
    GPM is recorded in pulses per second so will need to do a running average 
    averaged over how many seconds?
    pulse per second = pulse per minute / 60 (second/minute)
    pulse per minute = pulse per gallon * gallon per minute
    pulse per gallon = 1/ gallon per pulse
    gallon per pulse = 0.01725
    gallon per minute =~ 0.5
    pulse per second = (1 / 0.01725 ) * 0.5 / 60
        = 0.483091787439613

    seems like 10 seconds would be enough for running average.
    take average of forward and backward running average across test.segment
    to avoid missing values at begining or end
    
    do this in clean_data.4.R
    